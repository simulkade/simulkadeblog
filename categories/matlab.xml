<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>SIMULKADE (Posts about Matlab)</title><link>http://simulkade.com/</link><description></description><atom:link rel="self" type="application/rss+xml" href="http://simulkade.com/categories/matlab.xml"></atom:link><language>en</language><lastBuildDate>Tue, 22 May 2018 13:24:35 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Matlab and Julia -- Part II</title><link>http://simulkade.com/posts/Matlab%20and%20Julia%20--%20Part%20II.html</link><dc:creator>AA Eftekhari</dc:creator><description>&lt;div&gt;&lt;p&gt;In the previous post, I explained how to program the solution procedure of Buckley-Leverett equation in Matlab. Here, I'm trying to move everything to Julia. First, you need to install Julia, and a few important packages. Personally, I prefer the last development version. In Ubuntu-based distributions, you can install it by writing the following lines in the terminal.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;sudo add-apt-repository ppa:staticfloat/julianightlies
sudo add-apt-repository ppa:staticfloat/julia-deps
sudo apt-get update
sudo apt-get install julia
&lt;/pre&gt;


&lt;p&gt;&lt;a href="http://simulkade.com/posts/Matlab%20and%20Julia%20--%20Part%20II.html"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Julia</category><category>Matlab</category><guid>http://simulkade.com/posts/Matlab%20and%20Julia%20--%20Part%20II.html</guid><pubDate>Thu, 02 Oct 2014 20:43:27 GMT</pubDate></item><item><title>Matlab and Julia -- Part I</title><link>http://simulkade.com/posts/Matlab%20and%20Julia%20--%20Part%20I.html</link><dc:creator>AA Eftekhari</dc:creator><description>&lt;div&gt;&lt;p&gt;I'm very comfortable with Matlab. It does most of the things that I need to do and I've written so many handy scripts and functions in it that I can barely afford to divorce it. I can easily read my data, which are not so many most of the time, analyze them, plot the results, and export the final figure to a format I prefer. However, I'm going to try and detach myself by learning how I can do all the Matlab stuff in Julia. I've already learned how to work with the arrays, write types, and I almost know all the differences. I'll write a post about it later. Here, I' going to try the root finding and optimization in Julia. Let's star by root finding. Let's say I have a function in Matlab. Most of the time, if it's not a long relation, I write it using &lt;code&gt;@&lt;/code&gt;. For instance, consider the fractional flow function:&lt;/p&gt;
&lt;p&gt;$$ f_w = \frac {k_{rw}/\mu_w}{k_{rw}/\mu_w+k_{ro}/\mu_o} $$
&lt;/p&gt;&lt;p&gt;&lt;a href="http://simulkade.com/posts/Matlab%20and%20Julia%20--%20Part%20I.html"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Julia</category><category>Matlab</category><guid>http://simulkade.com/posts/Matlab%20and%20Julia%20--%20Part%20I.html</guid><pubDate>Fri, 26 Sep 2014 08:25:07 GMT</pubDate></item></channel></rss>